#!/bin/bash

# Usage info
show_help() {
cat << EOF
Usage: ${0##*/} [-hltv] [-d <directory>] [-i <image>] [-n <name>] [-p <port>]

Start an EXP-enabled Jupyter Notebook or alternatively a Jupyter Lab with 
an optional initial working directory.

    -h          display this help and exit
    -l          launch Jupyter Lab (default: Jupyter Notebook)
    -t          start a user terminal
    -d wdir     position Jupyter in this directory to start (default: home)
    -i image    Docker image to use (default: 'the9cat/exp:24')
    -n name     Docker container name prefix (default: 'expbox')
    -p port     Jupyter port number (default: first unused port>=8888)
    -P port     Web server port number
    -v          verbose mode

Start a Jupyter Notebook in your home directory:
     $ expbox

Start a Jupyter Lab in a specific directory under your home directory:
     $ expbox -l -d /home/user/datadir

Start a Jupyter Notebook in a specific external directory.  Mounted as 
/work in the container:
     $ expbox -d /data/nbody

Start a bash terminal in your home directory:
     $ expbox -t

Start a bash terminal in a specific directory:
     $ expbox -t -d /directory
EOF
}

# Flag message
flag_once=0
flag_message() {
cat << EOF
---- We use 'sudo' to check for unused ports.  If you do not have or
---- can not use 'sudo', please choose Jupyter and Web ports using
---- the '-p' and '-P' flags.
----
EOF
flag_once=1
}

root_message() {
    cat << EOF
---- Please run this script as a normal user, not as sudo or root.
----
EOF
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
	cat << EOF
---- If you are running as root for privilege to execute docker,
---- please see https://docs.docker.com/engine/install/linux-postinstall
---- for details on configuring Docker Engine for normal users in Linux.
----
---- Alternatively, you may prefer the user-oriented Docker Desktop.
---- See https://docs.docker.com/install for instructions on
---- installing Docker Desktop for various Linux flavors.
EOF
    else
	cat << EOF
---- This should be the default for Mac OS or Windows OS.  See
---- https://docs.docker.com/engine/install for OS-specific hints. 
EOF
    fi
    exit
}


# Initialize variables

working_dir=""
verbose=0
terminal=0
jupyter_lab=0
port=0
webp=0
image="the9cat/exp:24"	# Default image
name="expbox"

OPTIND=1

while getopts hvltd:i:n:p:P: opt; do
    case $opt in
        h)
            show_help
            exit 0
            ;;
        v)  verbose=$((verbose+1))
            ;;
        l)  jupyter_lab=1
            ;;
        t)  terminal=1
            ;;
        d)  working_dir=$OPTARG
            ;;
        i)  image=$OPTARG
            ;;
        n)  name=$OPTARG
            ;;
        p)  port=$OPTARG
            ;;
        P)  webp=$OPTARG
            ;;
        *)
            show_help >&2
            exit 1
            ;;
    esac
done
shift "$((OPTIND-1))"   # Discard the options and sentinel --

# Everything that's left in "$@" is a non-option.  In our case, a FILE to process.
# printf 'verbose=<%d>\noutput_file=<%s>\nLeftovers:\n' "$verbose" "$output_file"
# printf '<%s>\n' "$@"

if [ "$EUID" -eq 0 ]
then
    root_message
fi

# Get an unused port in a range

WEBP=8080
WLST=8800
PORT=8888
LAST=12000

if (( webp > 0 )); then
    WEBP=$webp
else
    if (( flag_once == 0 )); then
	flag_message
    fi

    until (( WEBP > WLST ))
    do
	if [[ -z `sudo lsof -i ":$WEBP"` ]]; then
	    if ((verbose > 0)); then
		printf 'Found available port=<%d>\n' $WEBP;
	    fi
	    break;
	elif (( WEBP == WLST )); then
	    echo "No ports available";
	    exit 1;
	fi
	let WEBP+=1;
    done
fi

if (( port > 0 )); then
    PORT=$port
else
    if (( flag_once == 0 )); then
	flag_message
    fi

    until (( PORT > LAST ))
    do
	if [[ -z `sudo lsof -i ":$PORT"` ]] && [[ -z `docker ps -a -q -f name="expbox_$PORT"` ]]; then
	    if ((verbose > 0)); then
		printf 'Found available port=<%d>\n' $PORT;
	    fi
	    break;
	elif (( PORT == LAST )); then
	    echo "No ports available";
	    exit 1;
	fi
	let PORT+=1;
    done
fi

# Get the home directory prefix

if (( verbose > 0 )); then
    printf '**** PORT=%d\n' $PORT;
fi

homedir="$(dirname $HOME)"
if (( verbose > 0 )); then
    printf '**** Home base is %s\n' $homedir
fi

change_home=0
if [ $homedir != "/home" ]; then
    if (( verbose > 0 )); then
	printf 'Found home=<%s>\n' $homedir;
    fi
    change_home=1
fi

set -eu

USER=$(id -un)
# UID=$(id -u)
GID=$(id -g)
GROUP=$(id -gn)
NAME="${name}_$PORT"
MOUNT=""
WDIR=""
JTYPE="notebook"

if (( verbose > 0 )); then
    printf '**** Container name is %s\n' $NAME
fi

if [[ -z "$working_dir" ]]; then
    working_dir="$homedir/$USER";
    WDIR="$working_dir";
    if (( verbose > 0 )); then
	printf '**** Working directory is %s and was null\n' $WDIR;
    fi
else
    if [[ $working_dir != "$homedir"* ]]; then
	WDIR="/work"
	MOUNT="-v $working_dir:/work";
    else
	WDIR="$working_dir";
    fi
fi

if (( jupyter_lab > 0 )); then
    JTYPE="lab";
fi

if ((verbose > 0)); then
    printf '**** Jupyter flag is %d\n' $jupyter_lab
    printf '**** Jupyter type is %s\n' $JTYPE
    printf '**** Working directory is %s\n' $WDIR
    printf '**** Mount command is %s\n' $MOUNT
    printf '**** Home directory is %s\n' $homedir/$USER
fi

# Starts the container in an interactive, detached state in the data directory
echo "---- The container name is: $NAME"
echo -n "---- The container id is: "
docker run -dit -p $PORT:$PORT -p $WEBP:80 -w $WDIR $MOUNT -v $HOME:$homedir/$USER --name "$NAME" "$image" /bin/bash
echo "----"
echo "---- Stop the running container using:    docker stop $NAME"
echo "---- Remove the stopped container using:  docker rm $NAME"
echo "---- Or do both at the same time using:   docker rm -f $NAME"
echo "----"
echo "---- The 'readthedocs' manual is included in this Docker container!"
echo "---- Point at http://localhost:$WEBP or http://127.0.0.1:$WEBP to see it."
echo "----"
echo "---- Adding user $USER and changing ownership of the venv."
echo "---- This may take a minute or two...so many Python packages"

# Add a new home base
if (( change_home > 0 )); then
    docker exec "$NAME" /bin/bash -c "mkdir -p $homedir" 
fi

# Add the group (if the group exists this will exit, no problem)
docker exec "$NAME" /bin/bash -c "groupadd -f -g $GID $GROUP"

# Attach to the container and add the host user
docker exec "$NAME" /bin/bash -c "useradd -M -b $homedir -s /bin/bash -g $GID -u $UID $USER"

# Give the new user ownership of the venv
docker exec "$NAME" /bin/bash -c "chown -R $UID:$GID /opt/venv"

echo "----"
echo "---- Starting the documentation web server"

# Start the web server
docker exec -d $NAME /bin/bash --norc -c "busybox httpd -h /var/www/html"

if ((terminal > 0)); then
    echo "----"
    echo "---- Beginning an interactive terminal session"
    echo "----"
    docker exec -it --user $USER "$NAME" /bin/bash --norc
else
    echo "----"
    echo "---- Starting Jupyter for user $USER"
    echo "----"
    docker exec --user $USER "$NAME" /bin/bash --norc -c "jupyter $JTYPE --ip 0.0.0.0 --port=$PORT --no-browser"
fi
